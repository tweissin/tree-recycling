package com.trw;

import ch.qos.logback.classic.spi.ILoggingEvent;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.concurrent.Semaphore;

public class TreeRouteCreatorUI extends JDialog {
    private JPanel contentPane;
    private JButton buttonExit;
    private JTextArea textAreaLog;
    private JButton buttonStart;
    private JRadioButton weekend1RadioButton;
    private JRadioButton weekend2RadioButton;
    private JTextField textFieldPropertiesFile;
    private JButton buttonPickFile;
    private static final Logger logger = LoggerFactory.getLogger(TreeRouteCreator.class);
    private Semaphore semaphore = new Semaphore(1);

    public TreeRouteCreatorUI() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonExit);

        buttonExit.addActionListener(e -> onOK());

        buttonStart.addActionListener(e -> onStart());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        UIAppender.getInstance().setEvaluator((ILoggingEvent e) -> {
            SwingUtilities.invokeLater(() -> textAreaLog.append(e.toString() + "\n"));
            return true;
        });
        buttonPickFile.addActionListener(e -> onPickFile());
    }

    private void onPickFile() {
        final JFileChooser fileChooser = new JFileChooser(System.getProperty("user.dir"));
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            textFieldPropertiesFile.setText(file.getAbsolutePath());
        }
    }

    private void onStart() {
        int weekend = -1;
        if (weekend1RadioButton.isSelected()) {
            weekend = 1;
        } else if (weekend2RadioButton.isSelected()) {
            weekend = 2;
        }
        if (weekend == -1) {
            logger.warn("No weekend selected");
            JOptionPane.showMessageDialog(this, "Select a weekend");
            return;
        }
        if (textFieldPropertiesFile.getText().length() == 0) {
            logger.warn("No properties file selected");
            JOptionPane.showMessageDialog(this, "Must specify properties filename");
            return;
        }
        File propertiesFile = new File(textFieldPropertiesFile.getText());
        if (!propertiesFile.exists()) {
            logger.warn("Properties file does not exist: " + textFieldPropertiesFile.getText());
            JOptionPane.showMessageDialog(this, "File does not exist: " + textFieldPropertiesFile.getText());
            return;
        }
        Environment.setPropertiesFilename(propertiesFile);
        if (!semaphore.tryAcquire()) {
            logger.warn("Must wait for current process to complete");
            return;
        }
        final Component parent = this;
        new Thread(() -> {
            try {
                new TreeRouteCreator().updateRoutes(1);
            } catch (Exception e) {
                logger.error("Problem updating routes (check log): " + e.getMessage());
                JOptionPane.showMessageDialog(parent, "Problem updating routes (check log): " + e.getMessage());
            } finally {
                semaphore.release();
            }
        }).start();
    }

    private void onOK() {
        // add your code here
        dispose();
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) {
        TreeRouteCreatorUI dialog = new TreeRouteCreatorUI();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 8, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonExit = new JButton();
        buttonExit.setText("Exit");
        panel2.add(buttonExit, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 2, false));
        buttonStart = new JButton();
        buttonStart.setText("Start");
        panel2.add(buttonStart, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 3, false));
        final JLabel label1 = new JLabel();
        label1.setText("Weekend");
        panel2.add(label1, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        weekend1RadioButton = new JRadioButton();
        weekend1RadioButton.setText("Weekend 1");
        panel2.add(weekend1RadioButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        weekend2RadioButton = new JRadioButton();
        weekend2RadioButton.setText("Weekend 2");
        panel2.add(weekend2RadioButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Properties file");
        panel2.add(label2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textFieldPropertiesFile = new JTextField();
        panel2.add(textFieldPropertiesFile, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonPickFile = new JButton();
        buttonPickFile.setText("...");
        panel2.add(buttonPickFile, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textAreaLog = new JTextArea();
        scrollPane1.setViewportView(textAreaLog);
        final JLabel label3 = new JLabel();
        label3.setText("Log");
        contentPane.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        label2.setLabelFor(textFieldPropertiesFile);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(weekend1RadioButton);
        buttonGroup.add(weekend2RadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
